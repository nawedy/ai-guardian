import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  FileText,
  Copy,
  ExternalLink,
  ThumbsUp,
  ThumbsDown,
  MessageSquare
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';

const VulnerabilityDetails = ({ currentUser }) => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [vulnerability, setVulnerability] = useState(null);
  const [loading, setLoading] = useState(true);
  const [feedback, setFeedback] = useState('');
  const [feedbackSubmitted, setFeedbackSubmitted] = useState(false);

  useEffect(() => {
    const fetchVulnerabilityDetails = async () => {
      try {
        setLoading(true);
        
        // Mock data - in real app, this would be an API call
        const mockVulnerability = {
          id: id,
          type: 'HARDCODED_SECRET',
          severity: 'CRITICAL',
          title: 'Hardcoded API Key Detected',
          description: 'A hardcoded API key was found in the source code. This poses a significant security risk as the key could be exposed to unauthorized users.',
          file: 'auth.py',
          line: 23,
          column: 15,
          codeSnippet: `def authenticate_user(username, password):
    api_key = "sk-1234567890abcdef"  # This is a hardcoded secret!
    headers = {"Authorization": f"Bearer {api_key}"}
    response = requests.post("https://api.example.com/auth", headers=headers)
    return response.json()`,
          recommendation: 'Move the API key to environment variables or a secure configuration file. Use os.environ.get("API_KEY") to retrieve the key at runtime.',
          cweId: 'CWE-798',
          owasp: 'A02:2021 â€“ Cryptographic Failures',
          riskScore: 9.2,
          firstDetected: new Date(Date.now() - 1000 * 60 * 60 * 2),
          lastSeen: new Date(Date.now() - 1000 * 60 * 15),
          status: 'open',
          assignedTo: null,
          comments: [
            {
              id: 'comment_1',
              author: 'Security Bot',
              content: 'This vulnerability was automatically detected by our scanning engine.',
              timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2),
              type: 'system'
            }
          ],
          relatedVulnerabilities: [
            {
              id: 'vuln_002',
              type: 'HARDCODED_SECRET',
              file: 'config.py',
              line: 12,
              severity: 'HIGH'
            }
          ],
          fixSuggestions: [
            {
              title: 'Use Environment Variables',
              description: 'Store sensitive data in environment variables',
              code: `import os

def authenticate_user(username, password):
    api_key = os.environ.get("API_KEY")
    if not api_key:
        raise ValueError("API_KEY environment variable not set")
    headers = {"Authorization": f"Bearer {api_key}"}
    response = requests.post("https://api.example.com/auth", headers=headers)
    return response.json()`
            },
            {
              title: 'Use Configuration File',
              description: 'Store secrets in a secure configuration file',
              code: `import json

def load_config():
    with open('config.json', 'r') as f:
        return json.load(f)

def authenticate_user(username, password):
    config = load_config()
    api_key = config.get("api_key")
    headers = {"Authorization": f"Bearer {api_key}"}
    response = requests.post("https://api.example.com/auth", headers=headers)
    return response.json()`
            }
          ]
        };
        
        setVulnerability(mockVulnerability);
      } catch (error) {
        console.error('Error fetching vulnerability details:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilityDetails();
  }, [id]);

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'CRITICAL': return 'bg-red-100 text-red-800 border-red-200';
      case 'HIGH': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'MEDIUM': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'LOW': return 'bg-green-100 text-green-800 border-green-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'open': return <AlertTriangle className="w-4 h-4 text-red-600" />;
      case 'fixed': return <CheckCircle className="w-4 h-4 text-green-600" />;
      case 'in_progress': return <Clock className="w-4 h-4 text-blue-600" />;
      default: return <AlertTriangle className="w-4 h-4 text-gray-600" />;
    }
  };

  const handleFeedback = async (feedbackType) => {
    try {
      const response = await fetch('http://localhost:5003/api/feedback', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: currentUser.id,
          vulnerability_id: vulnerability.id,
          feedback: feedbackType,
          context: {
            type: vulnerability.type,
            severity: vulnerability.severity,
            file: vulnerability.file,
            line: vulnerability.line
          }
        }),
      });

      if (response.ok) {
        setFeedbackSubmitted(true);
        setTimeout(() => setFeedbackSubmitted(false), 3000);
      }
    } catch (error) {
      console.error('Error submitting feedback:', error);
    }
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const formatTimeAgo = (date) => {
    const now = new Date();
    const diffInMinutes = Math.floor((now - date) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;
    return `${Math.floor(diffInMinutes / 1440)}d ago`;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-full">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!vulnerability) {
    return (
      <div className="p-6">
        <div className="text-center py-12">
          <AlertTriangle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">Vulnerability not found</h3>
          <p className="text-gray-600 mb-4">The requested vulnerability could not be found.</p>
          <Button onClick={() => navigate('/scan-results')}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to Scan Results
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="ghost" onClick={() => navigate('/scan-results')}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back
          </Button>
          <div>
            <h1 className="text-3xl font-bold text-gray-900">{vulnerability.title}</h1>
            <p className="text-gray-600 mt-1">
              {vulnerability.file}:{vulnerability.line}
            </p>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          {feedbackSubmitted && (
            <Badge className="bg-green-100 text-green-800">
              Feedback submitted!
            </Badge>
          )}
          <Badge className={getSeverityColor(vulnerability.severity)}>
            {vulnerability.severity}
          </Badge>
          <div className="flex items-center space-x-1">
            {getStatusIcon(vulnerability.status)}
            <span className="text-sm font-medium capitalize">{vulnerability.status}</span>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left Column - Details */}
        <div className="lg:col-span-2 space-y-6">
          {/* Overview */}
          <Card>
            <CardHeader>
              <CardTitle>Vulnerability Overview</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <h4 className="font-medium text-gray-900 mb-2">Description</h4>
                <p className="text-gray-700">{vulnerability.description}</p>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium text-gray-900 mb-1">CWE ID</h4>
                  <p className="text-gray-700">{vulnerability.cweId}</p>
                </div>
                <div>
                  <h4 className="font-medium text-gray-900 mb-1">OWASP Category</h4>
                  <p className="text-gray-700">{vulnerability.owasp}</p>
                </div>
                <div>
                  <h4 className="font-medium text-gray-900 mb-1">Risk Score</h4>
                  <p className="text-gray-700 font-semibold">{vulnerability.riskScore}/10</p>
                </div>
                <div>
                  <h4 className="font-medium text-gray-900 mb-1">First Detected</h4>
                  <p className="text-gray-700">{formatTimeAgo(vulnerability.firstDetected)}</p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Code Snippet */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                Vulnerable Code
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => copyToClipboard(vulnerability.codeSnippet)}
                >
                  <Copy className="w-4 h-4" />
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <pre className="bg-gray-50 p-4 rounded-lg overflow-x-auto text-sm">
                <code>{vulnerability.codeSnippet}</code>
              </pre>
            </CardContent>
          </Card>

          {/* Fix Suggestions */}
          <Card>
            <CardHeader>
              <CardTitle>Recommended Fixes</CardTitle>
              <CardDescription>
                Here are some suggested ways to fix this vulnerability
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {vulnerability.fixSuggestions.map((suggestion, index) => (
                <div key={index} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium text-gray-900">{suggestion.title}</h4>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => copyToClipboard(suggestion.code)}
                    >
                      <Copy className="w-4 h-4" />
                    </Button>
                  </div>
                  <p className="text-sm text-gray-600 mb-3">{suggestion.description}</p>
                  <pre className="bg-gray-50 p-3 rounded text-sm overflow-x-auto">
                    <code>{suggestion.code}</code>
                  </pre>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Feedback */}
          <Card>
            <CardHeader>
              <CardTitle>Provide Feedback</CardTitle>
              <CardDescription>
                Help us improve our detection accuracy
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex space-x-3">
                <Button
                  variant="outline"
                  onClick={() => handleFeedback('true_positive')}
                  className="flex items-center"
                >
                  <ThumbsUp className="w-4 h-4 mr-2" />
                  True Positive
                </Button>
                <Button
                  variant="outline"
                  onClick={() => handleFeedback('false_positive')}
                  className="flex items-center"
                >
                  <ThumbsDown className="w-4 h-4 mr-2" />
                  False Positive
                </Button>
              </div>
              
              <div>
                <Textarea
                  placeholder="Additional comments about this vulnerability..."
                  value={feedback}
                  onChange={(e) => setFeedback(e.target.value)}
                />
                <Button className="mt-2" size="sm">
                  <MessageSquare className="w-4 h-4 mr-2" />
                  Submit Comment
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Right Column - Sidebar */}
        <div className="space-y-6">
          {/* Quick Actions */}
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button className="w-full">
                Mark as Fixed
              </Button>
              <Button variant="outline" className="w-full">
                Assign to Team Member
              </Button>
              <Button variant="outline" className="w-full">
                <ExternalLink className="w-4 h-4 mr-2" />
                View in IDE
              </Button>
            </CardContent>
          </Card>

          {/* Related Vulnerabilities */}
          {vulnerability.relatedVulnerabilities.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>Related Vulnerabilities</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {vulnerability.relatedVulnerabilities.map((related) => (
                  <div
                    key={related.id}
                    className="flex items-center justify-between p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100"
                    onClick={() => navigate(`/vulnerability/${related.id}`)}
                  >
                    <div>
                      <p className="text-sm font-medium text-gray-900">
                        {related.file}:{related.line}
                      </p>
                      <p className="text-xs text-gray-600">{related.type}</p>
                    </div>
                    <Badge className={getSeverityColor(related.severity)}>
                      {related.severity}
                    </Badge>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* Activity Timeline */}
          <Card>
            <CardHeader>
              <CardTitle>Activity Timeline</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {vulnerability.comments.map((comment) => (
                <div key={comment.id} className="flex space-x-3">
                  <div className="flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full">
                    <MessageSquare className="w-4 h-4 text-blue-600" />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-900">
                        {comment.author}
                      </span>
                      <span className="text-xs text-gray-500">
                        {formatTimeAgo(comment.timestamp)}
                      </span>
                    </div>
                    <p className="text-sm text-gray-700 mt-1">{comment.content}</p>
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityDetails;

