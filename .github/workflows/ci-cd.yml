name: AI Guardian CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [code-scanner, remediation-engine, intelligent-analysis, adaptive-learning, api-gateway]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend/${{ matrix.service }}/${{ matrix.service }}-service
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        cd backend/${{ matrix.service }}/${{ matrix.service }}-service
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        cd backend/${{ matrix.service }}/${{ matrix.service }}-service
        pytest tests/ --cov=src/ --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/${{ matrix.service }}/${{ matrix.service }}-service/coverage.xml

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd frontend/web-dashboard/web-dashboard
        npm ci
    
    - name: Run tests
      run: |
        cd frontend/web-dashboard/web-dashboard
        npm run test
    
    - name: Build
      run: |
        cd frontend/web-dashboard/web-dashboard
        npm run build

  test-cli:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install CLI dependencies
      run: |
        cd cli
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Test CLI
      run: |
        cd cli
        python -m pytest tests/ -v

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-cli]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Bandit Security Scan
      run: |
        pip install bandit
        bandit -r backend/ -f json -o bandit-report.json
    
    - name: Run npm audit
      run: |
        cd frontend/web-dashboard/web-dashboard
        npm audit --audit-level moderate

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-cli, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment scripts here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-cli, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add deployment scripts here

